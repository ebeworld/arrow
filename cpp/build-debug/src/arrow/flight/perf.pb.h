// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_perf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_perf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_perf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_perf_2eproto;
namespace arrow {
namespace flight {
namespace perf {
class Perf;
struct PerfDefaultTypeInternal;
extern PerfDefaultTypeInternal _Perf_default_instance_;
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace perf
}  // namespace flight
}  // namespace arrow
PROTOBUF_NAMESPACE_OPEN
template<> ::arrow::flight::perf::Perf* Arena::CreateMaybeMessage<::arrow::flight::perf::Perf>(Arena*);
template<> ::arrow::flight::perf::Token* Arena::CreateMaybeMessage<::arrow::flight::perf::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace arrow {
namespace flight {
namespace perf {

// ===================================================================

class Perf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrow.flight.perf.Perf) */ {
 public:
  inline Perf() : Perf(nullptr) {}
  ~Perf() override;
  explicit PROTOBUF_CONSTEXPR Perf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Perf(const Perf& from);
  Perf(Perf&& from) noexcept
    : Perf() {
    *this = ::std::move(from);
  }

  inline Perf& operator=(const Perf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Perf& operator=(Perf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Perf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Perf* internal_default_instance() {
    return reinterpret_cast<const Perf*>(
               &_Perf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Perf& a, Perf& b) {
    a.Swap(&b);
  }
  inline void Swap(Perf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Perf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Perf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Perf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Perf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Perf& from) {
    Perf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Perf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrow.flight.perf.Perf";
  }
  protected:
  explicit Perf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 1,
    kRecordsPerStreamFieldNumber = 3,
    kStreamCountFieldNumber = 2,
    kRecordsPerBatchFieldNumber = 4,
  };
  // bytes schema = 1;
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // int64 records_per_stream = 3;
  void clear_records_per_stream();
  int64_t records_per_stream() const;
  void set_records_per_stream(int64_t value);
  private:
  int64_t _internal_records_per_stream() const;
  void _internal_set_records_per_stream(int64_t value);
  public:

  // int32 stream_count = 2;
  void clear_stream_count();
  int32_t stream_count() const;
  void set_stream_count(int32_t value);
  private:
  int32_t _internal_stream_count() const;
  void _internal_set_stream_count(int32_t value);
  public:

  // int32 records_per_batch = 4;
  void clear_records_per_batch();
  int32_t records_per_batch() const;
  void set_records_per_batch(int32_t value);
  private:
  int32_t _internal_records_per_batch() const;
  void _internal_set_records_per_batch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:arrow.flight.perf.Perf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
    int64_t records_per_stream_;
    int32_t stream_count_;
    int32_t records_per_batch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_perf_2eproto;
};
// -------------------------------------------------------------------

class Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrow.flight.perf.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  explicit PROTOBUF_CONSTEXPR Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Token& from) {
    Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrow.flight.perf.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefinitionFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // .arrow.flight.perf.Perf definition = 1;
  bool has_definition() const;
  private:
  bool _internal_has_definition() const;
  public:
  void clear_definition();
  const ::arrow::flight::perf::Perf& definition() const;
  PROTOBUF_NODISCARD ::arrow::flight::perf::Perf* release_definition();
  ::arrow::flight::perf::Perf* mutable_definition();
  void set_allocated_definition(::arrow::flight::perf::Perf* definition);
  private:
  const ::arrow::flight::perf::Perf& _internal_definition() const;
  ::arrow::flight::perf::Perf* _internal_mutable_definition();
  public:
  void unsafe_arena_set_allocated_definition(
      ::arrow::flight::perf::Perf* definition);
  ::arrow::flight::perf::Perf* unsafe_arena_release_definition();

  // int64 start = 2;
  void clear_start();
  int64_t start() const;
  void set_start(int64_t value);
  private:
  int64_t _internal_start() const;
  void _internal_set_start(int64_t value);
  public:

  // int64 end = 3;
  void clear_end();
  int64_t end() const;
  void set_end(int64_t value);
  private:
  int64_t _internal_end() const;
  void _internal_set_end(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:arrow.flight.perf.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::arrow::flight::perf::Perf* definition_;
    int64_t start_;
    int64_t end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_perf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Perf

// bytes schema = 1;
inline void Perf::clear_schema() {
  _impl_.schema_.ClearToEmpty();
}
inline const std::string& Perf::schema() const {
  // @@protoc_insertion_point(field_get:arrow.flight.perf.Perf.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Perf::set_schema(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:arrow.flight.perf.Perf.schema)
}
inline std::string* Perf::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:arrow.flight.perf.Perf.schema)
  return _s;
}
inline const std::string& Perf::_internal_schema() const {
  return _impl_.schema_.Get();
}
inline void Perf::_internal_set_schema(const std::string& value) {
  
  _impl_.schema_.Set(value, GetArenaForAllocation());
}
inline std::string* Perf::_internal_mutable_schema() {
  
  return _impl_.schema_.Mutable(GetArenaForAllocation());
}
inline std::string* Perf::release_schema() {
  // @@protoc_insertion_point(field_release:arrow.flight.perf.Perf.schema)
  return _impl_.schema_.Release();
}
inline void Perf::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  _impl_.schema_.SetAllocated(schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_.IsDefault()) {
    _impl_.schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:arrow.flight.perf.Perf.schema)
}

// int32 stream_count = 2;
inline void Perf::clear_stream_count() {
  _impl_.stream_count_ = 0;
}
inline int32_t Perf::_internal_stream_count() const {
  return _impl_.stream_count_;
}
inline int32_t Perf::stream_count() const {
  // @@protoc_insertion_point(field_get:arrow.flight.perf.Perf.stream_count)
  return _internal_stream_count();
}
inline void Perf::_internal_set_stream_count(int32_t value) {
  
  _impl_.stream_count_ = value;
}
inline void Perf::set_stream_count(int32_t value) {
  _internal_set_stream_count(value);
  // @@protoc_insertion_point(field_set:arrow.flight.perf.Perf.stream_count)
}

// int64 records_per_stream = 3;
inline void Perf::clear_records_per_stream() {
  _impl_.records_per_stream_ = int64_t{0};
}
inline int64_t Perf::_internal_records_per_stream() const {
  return _impl_.records_per_stream_;
}
inline int64_t Perf::records_per_stream() const {
  // @@protoc_insertion_point(field_get:arrow.flight.perf.Perf.records_per_stream)
  return _internal_records_per_stream();
}
inline void Perf::_internal_set_records_per_stream(int64_t value) {
  
  _impl_.records_per_stream_ = value;
}
inline void Perf::set_records_per_stream(int64_t value) {
  _internal_set_records_per_stream(value);
  // @@protoc_insertion_point(field_set:arrow.flight.perf.Perf.records_per_stream)
}

// int32 records_per_batch = 4;
inline void Perf::clear_records_per_batch() {
  _impl_.records_per_batch_ = 0;
}
inline int32_t Perf::_internal_records_per_batch() const {
  return _impl_.records_per_batch_;
}
inline int32_t Perf::records_per_batch() const {
  // @@protoc_insertion_point(field_get:arrow.flight.perf.Perf.records_per_batch)
  return _internal_records_per_batch();
}
inline void Perf::_internal_set_records_per_batch(int32_t value) {
  
  _impl_.records_per_batch_ = value;
}
inline void Perf::set_records_per_batch(int32_t value) {
  _internal_set_records_per_batch(value);
  // @@protoc_insertion_point(field_set:arrow.flight.perf.Perf.records_per_batch)
}

// -------------------------------------------------------------------

// Token

// .arrow.flight.perf.Perf definition = 1;
inline bool Token::_internal_has_definition() const {
  return this != internal_default_instance() && _impl_.definition_ != nullptr;
}
inline bool Token::has_definition() const {
  return _internal_has_definition();
}
inline void Token::clear_definition() {
  if (GetArenaForAllocation() == nullptr && _impl_.definition_ != nullptr) {
    delete _impl_.definition_;
  }
  _impl_.definition_ = nullptr;
}
inline const ::arrow::flight::perf::Perf& Token::_internal_definition() const {
  const ::arrow::flight::perf::Perf* p = _impl_.definition_;
  return p != nullptr ? *p : reinterpret_cast<const ::arrow::flight::perf::Perf&>(
      ::arrow::flight::perf::_Perf_default_instance_);
}
inline const ::arrow::flight::perf::Perf& Token::definition() const {
  // @@protoc_insertion_point(field_get:arrow.flight.perf.Token.definition)
  return _internal_definition();
}
inline void Token::unsafe_arena_set_allocated_definition(
    ::arrow::flight::perf::Perf* definition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.definition_);
  }
  _impl_.definition_ = definition;
  if (definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:arrow.flight.perf.Token.definition)
}
inline ::arrow::flight::perf::Perf* Token::release_definition() {
  
  ::arrow::flight::perf::Perf* temp = _impl_.definition_;
  _impl_.definition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::arrow::flight::perf::Perf* Token::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_release:arrow.flight.perf.Token.definition)
  
  ::arrow::flight::perf::Perf* temp = _impl_.definition_;
  _impl_.definition_ = nullptr;
  return temp;
}
inline ::arrow::flight::perf::Perf* Token::_internal_mutable_definition() {
  
  if (_impl_.definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrow::flight::perf::Perf>(GetArenaForAllocation());
    _impl_.definition_ = p;
  }
  return _impl_.definition_;
}
inline ::arrow::flight::perf::Perf* Token::mutable_definition() {
  ::arrow::flight::perf::Perf* _msg = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:arrow.flight.perf.Token.definition)
  return _msg;
}
inline void Token::set_allocated_definition(::arrow::flight::perf::Perf* definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.definition_;
  }
  if (definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(definition);
    if (message_arena != submessage_arena) {
      definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, definition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.definition_ = definition;
  // @@protoc_insertion_point(field_set_allocated:arrow.flight.perf.Token.definition)
}

// int64 start = 2;
inline void Token::clear_start() {
  _impl_.start_ = int64_t{0};
}
inline int64_t Token::_internal_start() const {
  return _impl_.start_;
}
inline int64_t Token::start() const {
  // @@protoc_insertion_point(field_get:arrow.flight.perf.Token.start)
  return _internal_start();
}
inline void Token::_internal_set_start(int64_t value) {
  
  _impl_.start_ = value;
}
inline void Token::set_start(int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:arrow.flight.perf.Token.start)
}

// int64 end = 3;
inline void Token::clear_end() {
  _impl_.end_ = int64_t{0};
}
inline int64_t Token::_internal_end() const {
  return _impl_.end_;
}
inline int64_t Token::end() const {
  // @@protoc_insertion_point(field_get:arrow.flight.perf.Token.end)
  return _internal_end();
}
inline void Token::_internal_set_end(int64_t value) {
  
  _impl_.end_ = value;
}
inline void Token::set_end(int64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:arrow.flight.perf.Token.end)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perf
}  // namespace flight
}  // namespace arrow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_perf_2eproto
