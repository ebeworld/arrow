// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Flight.proto

#include "Flight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace arrow {
namespace flight {
namespace protocol {
PROTOBUF_CONSTEXPR HandshakeRequest::HandshakeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_version_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeRequestDefaultTypeInternal() {}
  union {
    HandshakeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeRequestDefaultTypeInternal _HandshakeRequest_default_instance_;
PROTOBUF_CONSTEXPR HandshakeResponse::HandshakeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_version_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandshakeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeResponseDefaultTypeInternal() {}
  union {
    HandshakeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
PROTOBUF_CONSTEXPR BasicAuth::BasicAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BasicAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasicAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasicAuthDefaultTypeInternal() {}
  union {
    BasicAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasicAuthDefaultTypeInternal _BasicAuth_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR ActionType::ActionType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActionTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionTypeDefaultTypeInternal() {}
  union {
    ActionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionTypeDefaultTypeInternal _ActionType_default_instance_;
PROTOBUF_CONSTEXPR Criteria::Criteria(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expression_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CriteriaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CriteriaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CriteriaDefaultTypeInternal() {}
  union {
    Criteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CriteriaDefaultTypeInternal _Criteria_default_instance_;
PROTOBUF_CONSTEXPR Action::Action(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionDefaultTypeInternal _Action_default_instance_;
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
PROTOBUF_CONSTEXPR SchemaResult::SchemaResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SchemaResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchemaResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchemaResultDefaultTypeInternal() {}
  union {
    SchemaResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchemaResultDefaultTypeInternal _SchemaResult_default_instance_;
PROTOBUF_CONSTEXPR FlightDescriptor::FlightDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{}
  , /*decltype(_impl_.cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightDescriptorDefaultTypeInternal() {}
  union {
    FlightDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightDescriptorDefaultTypeInternal _FlightDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FlightInfo::FlightInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.endpoint_)*/{}
  , /*decltype(_impl_.schema_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flight_descriptor_)*/nullptr
  , /*decltype(_impl_.total_records_)*/int64_t{0}
  , /*decltype(_impl_.total_bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightInfoDefaultTypeInternal() {}
  union {
    FlightInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightInfoDefaultTypeInternal _FlightInfo_default_instance_;
PROTOBUF_CONSTEXPR FlightEndpoint::FlightEndpoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/{}
  , /*decltype(_impl_.ticket_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightEndpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightEndpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightEndpointDefaultTypeInternal() {}
  union {
    FlightEndpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightEndpointDefaultTypeInternal _FlightEndpoint_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Ticket::Ticket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TicketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TicketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TicketDefaultTypeInternal() {}
  union {
    Ticket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TicketDefaultTypeInternal _Ticket_default_instance_;
PROTOBUF_CONSTEXPR FlightData::FlightData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flight_descriptor_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightDataDefaultTypeInternal() {}
  union {
    FlightData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightDataDefaultTypeInternal _FlightData_default_instance_;
PROTOBUF_CONSTEXPR PutResult::PutResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutResultDefaultTypeInternal() {}
  union {
    PutResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutResultDefaultTypeInternal _PutResult_default_instance_;
}  // namespace protocol
}  // namespace flight
}  // namespace arrow
static ::_pb::Metadata file_level_metadata_Flight_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Flight_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Flight_2eproto = nullptr;

const uint32_t TableStruct_Flight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::HandshakeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::HandshakeRequest, _impl_.protocol_version_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::HandshakeRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::HandshakeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::HandshakeResponse, _impl_.protocol_version_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::HandshakeResponse, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::BasicAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::BasicAuth, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::BasicAuth, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::ActionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::ActionType, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::ActionType, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Criteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Criteria, _impl_.expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Action, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Action, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Result, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::SchemaResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::SchemaResult, _impl_.schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightDescriptor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightDescriptor, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightDescriptor, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightInfo, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightInfo, _impl_.flight_descriptor_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightInfo, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightInfo, _impl_.total_records_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightInfo, _impl_.total_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightEndpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightEndpoint, _impl_.ticket_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightEndpoint, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Location, _impl_.uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::Ticket, _impl_.ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightData, _impl_.flight_descriptor_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightData, _impl_.data_header_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightData, _impl_.app_metadata_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::FlightData, _impl_.data_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::PutResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::protocol::PutResult, _impl_.app_metadata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::arrow::flight::protocol::HandshakeRequest)},
  { 8, -1, -1, sizeof(::arrow::flight::protocol::HandshakeResponse)},
  { 16, -1, -1, sizeof(::arrow::flight::protocol::BasicAuth)},
  { 24, -1, -1, sizeof(::arrow::flight::protocol::Empty)},
  { 30, -1, -1, sizeof(::arrow::flight::protocol::ActionType)},
  { 38, -1, -1, sizeof(::arrow::flight::protocol::Criteria)},
  { 45, -1, -1, sizeof(::arrow::flight::protocol::Action)},
  { 53, -1, -1, sizeof(::arrow::flight::protocol::Result)},
  { 60, -1, -1, sizeof(::arrow::flight::protocol::SchemaResult)},
  { 67, -1, -1, sizeof(::arrow::flight::protocol::FlightDescriptor)},
  { 76, -1, -1, sizeof(::arrow::flight::protocol::FlightInfo)},
  { 87, -1, -1, sizeof(::arrow::flight::protocol::FlightEndpoint)},
  { 95, -1, -1, sizeof(::arrow::flight::protocol::Location)},
  { 102, -1, -1, sizeof(::arrow::flight::protocol::Ticket)},
  { 109, -1, -1, sizeof(::arrow::flight::protocol::FlightData)},
  { 119, -1, -1, sizeof(::arrow::flight::protocol::PutResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::arrow::flight::protocol::_HandshakeRequest_default_instance_._instance,
  &::arrow::flight::protocol::_HandshakeResponse_default_instance_._instance,
  &::arrow::flight::protocol::_BasicAuth_default_instance_._instance,
  &::arrow::flight::protocol::_Empty_default_instance_._instance,
  &::arrow::flight::protocol::_ActionType_default_instance_._instance,
  &::arrow::flight::protocol::_Criteria_default_instance_._instance,
  &::arrow::flight::protocol::_Action_default_instance_._instance,
  &::arrow::flight::protocol::_Result_default_instance_._instance,
  &::arrow::flight::protocol::_SchemaResult_default_instance_._instance,
  &::arrow::flight::protocol::_FlightDescriptor_default_instance_._instance,
  &::arrow::flight::protocol::_FlightInfo_default_instance_._instance,
  &::arrow::flight::protocol::_FlightEndpoint_default_instance_._instance,
  &::arrow::flight::protocol::_Location_default_instance_._instance,
  &::arrow::flight::protocol::_Ticket_default_instance_._instance,
  &::arrow::flight::protocol::_FlightData_default_instance_._instance,
  &::arrow::flight::protocol::_PutResult_default_instance_._instance,
};

const char descriptor_table_protodef_Flight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Flight.proto\022\025arrow.flight.protocol\"=\n"
  "\020HandshakeRequest\022\030\n\020protocol_version\030\001 "
  "\001(\004\022\017\n\007payload\030\002 \001(\014\">\n\021HandshakeRespons"
  "e\022\030\n\020protocol_version\030\001 \001(\004\022\017\n\007payload\030\002"
  " \001(\014\"/\n\tBasicAuth\022\020\n\010username\030\002 \001(\t\022\020\n\010p"
  "assword\030\003 \001(\t\"\007\n\005Empty\"/\n\nActionType\022\014\n\004"
  "type\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\"\036\n\010Crite"
  "ria\022\022\n\nexpression\030\001 \001(\014\"$\n\006Action\022\014\n\004typ"
  "e\030\001 \001(\t\022\014\n\004body\030\002 \001(\014\"\026\n\006Result\022\014\n\004body\030"
  "\001 \001(\014\"\036\n\014SchemaResult\022\016\n\006schema\030\001 \001(\014\"\245\001"
  "\n\020FlightDescriptor\022D\n\004type\030\001 \001(\01626.arrow"
  ".flight.protocol.FlightDescriptor.Descri"
  "ptorType\022\013\n\003cmd\030\002 \001(\014\022\014\n\004path\030\003 \003(\t\"0\n\016D"
  "escriptorType\022\013\n\007UNKNOWN\020\000\022\010\n\004PATH\020\001\022\007\n\003"
  "CMD\020\002\"\305\001\n\nFlightInfo\022\016\n\006schema\030\001 \001(\014\022B\n\021"
  "flight_descriptor\030\002 \001(\0132\'.arrow.flight.p"
  "rotocol.FlightDescriptor\0227\n\010endpoint\030\003 \003"
  "(\0132%.arrow.flight.protocol.FlightEndpoin"
  "t\022\025\n\rtotal_records\030\004 \001(\003\022\023\n\013total_bytes\030"
  "\005 \001(\003\"r\n\016FlightEndpoint\022-\n\006ticket\030\001 \001(\0132"
  "\035.arrow.flight.protocol.Ticket\0221\n\010locati"
  "on\030\002 \003(\0132\037.arrow.flight.protocol.Locatio"
  "n\"\027\n\010Location\022\013\n\003uri\030\001 \001(\t\"\030\n\006Ticket\022\016\n\006"
  "ticket\030\001 \001(\014\"\217\001\n\nFlightData\022B\n\021flight_de"
  "scriptor\030\001 \001(\0132\'.arrow.flight.protocol.F"
  "lightDescriptor\022\023\n\013data_header\030\002 \001(\014\022\024\n\014"
  "app_metadata\030\003 \001(\014\022\022\n\tdata_body\030\350\007 \001(\014\"!"
  "\n\tPutResult\022\024\n\014app_metadata\030\001 \001(\0142\247\006\n\rFl"
  "ightService\022d\n\tHandshake\022\'.arrow.flight."
  "protocol.HandshakeRequest\032(.arrow.flight"
  ".protocol.HandshakeResponse\"\000(\0010\001\022U\n\013Lis"
  "tFlights\022\037.arrow.flight.protocol.Criteri"
  "a\032!.arrow.flight.protocol.FlightInfo\"\0000\001"
  "\022]\n\rGetFlightInfo\022\'.arrow.flight.protoco"
  "l.FlightDescriptor\032!.arrow.flight.protoc"
  "ol.FlightInfo\"\000\022[\n\tGetSchema\022\'.arrow.fli"
  "ght.protocol.FlightDescriptor\032#.arrow.fl"
  "ight.protocol.SchemaResult\"\000\022M\n\005DoGet\022\035."
  "arrow.flight.protocol.Ticket\032!.arrow.fli"
  "ght.protocol.FlightData\"\0000\001\022R\n\005DoPut\022!.a"
  "rrow.flight.protocol.FlightData\032 .arrow."
  "flight.protocol.PutResult\"\000(\0010\001\022X\n\nDoExc"
  "hange\022!.arrow.flight.protocol.FlightData"
  "\032!.arrow.flight.protocol.FlightData\"\000(\0010"
  "\001\022L\n\010DoAction\022\035.arrow.flight.protocol.Ac"
  "tion\032\035.arrow.flight.protocol.Result\"\0000\001\022"
  "R\n\013ListActions\022\034.arrow.flight.protocol.E"
  "mpty\032!.arrow.flight.protocol.ActionType\""
  "\0000\001Bv\n\034org.apache.arrow.flight.implZ7git"
  "hub.com/apache/arrow/go/arrow/flight/int"
  "ernal/flight\252\002\034Apache.Arrow.Flight.Proto"
  "colb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Flight_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Flight_2eproto = {
    false, false, 2051, descriptor_table_protodef_Flight_2eproto,
    "Flight.proto",
    &descriptor_table_Flight_2eproto_once, nullptr, 0, 16,
    schemas, file_default_instances, TableStruct_Flight_2eproto::offsets,
    file_level_metadata_Flight_2eproto, file_level_enum_descriptors_Flight_2eproto,
    file_level_service_descriptors_Flight_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Flight_2eproto_getter() {
  return &descriptor_table_Flight_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Flight_2eproto(&descriptor_table_Flight_2eproto);
namespace arrow {
namespace flight {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightDescriptor_DescriptorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Flight_2eproto);
  return file_level_enum_descriptors_Flight_2eproto[0];
}
bool FlightDescriptor_DescriptorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FlightDescriptor_DescriptorType FlightDescriptor::UNKNOWN;
constexpr FlightDescriptor_DescriptorType FlightDescriptor::PATH;
constexpr FlightDescriptor_DescriptorType FlightDescriptor::CMD;
constexpr FlightDescriptor_DescriptorType FlightDescriptor::DescriptorType_MIN;
constexpr FlightDescriptor_DescriptorType FlightDescriptor::DescriptorType_MAX;
constexpr int FlightDescriptor::DescriptorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class HandshakeRequest::_Internal {
 public:
};

HandshakeRequest::HandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.HandshakeRequest)
}
HandshakeRequest::HandshakeRequest(const HandshakeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.protocol_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.HandshakeRequest)
}

inline void HandshakeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.protocol_version_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeRequest::~HandshakeRequest() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.HandshakeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void HandshakeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.HandshakeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.protocol_version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.HandshakeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_protocol_version(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.HandshakeRequest)
  return target;
}

size_t HandshakeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.HandshakeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_protocol_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeRequest::GetClassData() const { return &_class_data_; }


void HandshakeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeRequest*>(&to_msg);
  auto& from = static_cast<const HandshakeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.HandshakeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_protocol_version() != 0) {
    _this->_internal_set_protocol_version(from._internal_protocol_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeRequest::CopyFrom(const HandshakeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.HandshakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeRequest::IsInitialized() const {
  return true;
}

void HandshakeRequest::InternalSwap(HandshakeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.protocol_version_, other->_impl_.protocol_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[0]);
}

// ===================================================================

class HandshakeResponse::_Internal {
 public:
};

HandshakeResponse::HandshakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.HandshakeResponse)
}
HandshakeResponse::HandshakeResponse(const HandshakeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.protocol_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.HandshakeResponse)
}

inline void HandshakeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.protocol_version_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeResponse::~HandshakeResponse() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.HandshakeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void HandshakeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.HandshakeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.protocol_version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.HandshakeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_protocol_version(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.HandshakeResponse)
  return target;
}

size_t HandshakeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.HandshakeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint64 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_protocol_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeResponse::GetClassData() const { return &_class_data_; }


void HandshakeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeResponse*>(&to_msg);
  auto& from = static_cast<const HandshakeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.HandshakeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_protocol_version() != 0) {
    _this->_internal_set_protocol_version(from._internal_protocol_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeResponse::CopyFrom(const HandshakeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.HandshakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeResponse::IsInitialized() const {
  return true;
}

void HandshakeResponse::InternalSwap(HandshakeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.protocol_version_, other->_impl_.protocol_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[1]);
}

// ===================================================================

class BasicAuth::_Internal {
 public:
};

BasicAuth::BasicAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.BasicAuth)
}
BasicAuth::BasicAuth(const BasicAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BasicAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.BasicAuth)
}

inline void BasicAuth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BasicAuth::~BasicAuth() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.BasicAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasicAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void BasicAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BasicAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.BasicAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arrow.flight.protocol.BasicAuth.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arrow.flight.protocol.BasicAuth.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.BasicAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrow.flight.protocol.BasicAuth.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrow.flight.protocol.BasicAuth.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.BasicAuth)
  return target;
}

size_t BasicAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.BasicAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BasicAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicAuth::GetClassData() const { return &_class_data_; }


void BasicAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BasicAuth*>(&to_msg);
  auto& from = static_cast<const BasicAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.BasicAuth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicAuth::CopyFrom(const BasicAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.BasicAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicAuth::IsInitialized() const {
  return true;
}

void BasicAuth::InternalSwap(BasicAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[2]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[3]);
}

// ===================================================================

class ActionType::_Internal {
 public:
};

ActionType::ActionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.ActionType)
}
ActionType::ActionType(const ActionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.ActionType)
}

inline void ActionType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActionType::~ActionType() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.ActionType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.description_.Destroy();
}

void ActionType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionType::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.ActionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arrow.flight.protocol.ActionType.type"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arrow.flight.protocol.ActionType.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.ActionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrow.flight.protocol.ActionType.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrow.flight.protocol.ActionType.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.ActionType)
  return target;
}

size_t ActionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.ActionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionType::GetClassData() const { return &_class_data_; }


void ActionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionType*>(&to_msg);
  auto& from = static_cast<const ActionType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.ActionType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionType::CopyFrom(const ActionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.ActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionType::IsInitialized() const {
  return true;
}

void ActionType::InternalSwap(ActionType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[4]);
}

// ===================================================================

class Criteria::_Internal {
 public:
};

Criteria::Criteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.Criteria)
}
Criteria::Criteria(const Criteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Criteria* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expression().empty()) {
    _this->_impl_.expression_.Set(from._internal_expression(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.Criteria)
}

inline void Criteria::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Criteria::~Criteria() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.Criteria)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Criteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expression_.Destroy();
}

void Criteria::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Criteria::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.Criteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.expression_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Criteria::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_expression();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Criteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.Criteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes expression = 1;
  if (!this->_internal_expression().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_expression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.Criteria)
  return target;
}

size_t Criteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.Criteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes expression = 1;
  if (!this->_internal_expression().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_expression());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Criteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Criteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Criteria::GetClassData() const { return &_class_data_; }


void Criteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Criteria*>(&to_msg);
  auto& from = static_cast<const Criteria&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.Criteria)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_expression().empty()) {
    _this->_internal_set_expression(from._internal_expression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Criteria::CopyFrom(const Criteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.Criteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Criteria::IsInitialized() const {
  return true;
}

void Criteria::InternalSwap(Criteria* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expression_, lhs_arena,
      &other->_impl_.expression_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Criteria::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[5]);
}

// ===================================================================

class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Action* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.Action)
}

inline void Action::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.Action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.body_.Destroy();
}

void Action::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arrow.flight.protocol.Action.type"));
        } else
          goto handle_unusual;
        continue;
      // bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrow.flight.protocol.Action.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }


void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Action*>(&to_msg);
  auto& from = static_cast<const Action&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.Action)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[6]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.Result)
}

inline void Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes body = 1;
  if (!this->_internal_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body = 1;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[7]);
}

// ===================================================================

class SchemaResult::_Internal {
 public:
};

SchemaResult::SchemaResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.SchemaResult)
}
SchemaResult::SchemaResult(const SchemaResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SchemaResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema().empty()) {
    _this->_impl_.schema_.Set(from._internal_schema(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.SchemaResult)
}

inline void SchemaResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SchemaResult::~SchemaResult() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.SchemaResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SchemaResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_.Destroy();
}

void SchemaResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SchemaResult::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.SchemaResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SchemaResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.SchemaResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes schema = 1;
  if (!this->_internal_schema().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_schema(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.SchemaResult)
  return target;
}

size_t SchemaResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.SchemaResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes schema = 1;
  if (!this->_internal_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchemaResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SchemaResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchemaResult::GetClassData() const { return &_class_data_; }


void SchemaResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SchemaResult*>(&to_msg);
  auto& from = static_cast<const SchemaResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.SchemaResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_schema().empty()) {
    _this->_internal_set_schema(from._internal_schema());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchemaResult::CopyFrom(const SchemaResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.SchemaResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaResult::IsInitialized() const {
  return true;
}

void SchemaResult::InternalSwap(SchemaResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_, lhs_arena,
      &other->_impl_.schema_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[8]);
}

// ===================================================================

class FlightDescriptor::_Internal {
 public:
};

FlightDescriptor::FlightDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.FlightDescriptor)
}
FlightDescriptor::FlightDescriptor(const FlightDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){from._impl_.path_}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmd().empty()) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.FlightDescriptor)
}

inline void FlightDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){arena}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlightDescriptor::~FlightDescriptor() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.FlightDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.~RepeatedPtrField();
  _impl_.cmd_.Destroy();
}

void FlightDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.FlightDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _impl_.cmd_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .arrow.flight.protocol.FlightDescriptor.DescriptorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::arrow::flight::protocol::FlightDescriptor_DescriptorType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "arrow.flight.protocol.FlightDescriptor.path"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.FlightDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.FlightDescriptor.DescriptorType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes cmd = 2;
  if (!this->_internal_cmd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_cmd(), target);
  }

  // repeated string path = 3;
  for (int i = 0, n = this->_internal_path_size(); i < n; i++) {
    const auto& s = this->_internal_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrow.flight.protocol.FlightDescriptor.path");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.FlightDescriptor)
  return target;
}

size_t FlightDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.FlightDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string path = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.path_.size());
  for (int i = 0, n = _impl_.path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.path_.Get(i));
  }

  // bytes cmd = 2;
  if (!this->_internal_cmd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cmd());
  }

  // .arrow.flight.protocol.FlightDescriptor.DescriptorType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightDescriptor::GetClassData() const { return &_class_data_; }


void FlightDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightDescriptor*>(&to_msg);
  auto& from = static_cast<const FlightDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.FlightDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.path_.MergeFrom(from._impl_.path_);
  if (!from._internal_cmd().empty()) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightDescriptor::CopyFrom(const FlightDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.FlightDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightDescriptor::IsInitialized() const {
  return true;
}

void FlightDescriptor::InternalSwap(FlightDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[9]);
}

// ===================================================================

class FlightInfo::_Internal {
 public:
  static const ::arrow::flight::protocol::FlightDescriptor& flight_descriptor(const FlightInfo* msg);
};

const ::arrow::flight::protocol::FlightDescriptor&
FlightInfo::_Internal::flight_descriptor(const FlightInfo* msg) {
  return *msg->_impl_.flight_descriptor_;
}
FlightInfo::FlightInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.FlightInfo)
}
FlightInfo::FlightInfo(const FlightInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoint_){from._impl_.endpoint_}
    , decltype(_impl_.schema_){}
    , decltype(_impl_.flight_descriptor_){nullptr}
    , decltype(_impl_.total_records_){}
    , decltype(_impl_.total_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema().empty()) {
    _this->_impl_.schema_.Set(from._internal_schema(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_flight_descriptor()) {
    _this->_impl_.flight_descriptor_ = new ::arrow::flight::protocol::FlightDescriptor(*from._impl_.flight_descriptor_);
  }
  ::memcpy(&_impl_.total_records_, &from._impl_.total_records_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_bytes_) -
    reinterpret_cast<char*>(&_impl_.total_records_)) + sizeof(_impl_.total_bytes_));
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.FlightInfo)
}

inline void FlightInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoint_){arena}
    , decltype(_impl_.schema_){}
    , decltype(_impl_.flight_descriptor_){nullptr}
    , decltype(_impl_.total_records_){int64_t{0}}
    , decltype(_impl_.total_bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlightInfo::~FlightInfo() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.FlightInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.endpoint_.~RepeatedPtrField();
  _impl_.schema_.Destroy();
  if (this != internal_default_instance()) delete _impl_.flight_descriptor_;
}

void FlightInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.FlightInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.endpoint_.Clear();
  _impl_.schema_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.flight_descriptor_ != nullptr) {
    delete _impl_.flight_descriptor_;
  }
  _impl_.flight_descriptor_ = nullptr;
  ::memset(&_impl_.total_records_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_bytes_) -
      reinterpret_cast<char*>(&_impl_.total_records_)) + sizeof(_impl_.total_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .arrow.flight.protocol.FlightDescriptor flight_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flight_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .arrow.flight.protocol.FlightEndpoint endpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 total_records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.FlightInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes schema = 1;
  if (!this->_internal_schema().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_schema(), target);
  }

  // .arrow.flight.protocol.FlightDescriptor flight_descriptor = 2;
  if (this->_internal_has_flight_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::flight_descriptor(this),
        _Internal::flight_descriptor(this).GetCachedSize(), target, stream);
  }

  // repeated .arrow.flight.protocol.FlightEndpoint endpoint = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_endpoint_size()); i < n; i++) {
    const auto& repfield = this->_internal_endpoint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 total_records = 4;
  if (this->_internal_total_records() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_records(), target);
  }

  // int64 total_bytes = 5;
  if (this->_internal_total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.FlightInfo)
  return target;
}

size_t FlightInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.FlightInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arrow.flight.protocol.FlightEndpoint endpoint = 3;
  total_size += 1UL * this->_internal_endpoint_size();
  for (const auto& msg : this->_impl_.endpoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes schema = 1;
  if (!this->_internal_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema());
  }

  // .arrow.flight.protocol.FlightDescriptor flight_descriptor = 2;
  if (this->_internal_has_flight_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flight_descriptor_);
  }

  // int64 total_records = 4;
  if (this->_internal_total_records() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_records());
  }

  // int64 total_bytes = 5;
  if (this->_internal_total_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightInfo::GetClassData() const { return &_class_data_; }


void FlightInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightInfo*>(&to_msg);
  auto& from = static_cast<const FlightInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.FlightInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.endpoint_.MergeFrom(from._impl_.endpoint_);
  if (!from._internal_schema().empty()) {
    _this->_internal_set_schema(from._internal_schema());
  }
  if (from._internal_has_flight_descriptor()) {
    _this->_internal_mutable_flight_descriptor()->::arrow::flight::protocol::FlightDescriptor::MergeFrom(
        from._internal_flight_descriptor());
  }
  if (from._internal_total_records() != 0) {
    _this->_internal_set_total_records(from._internal_total_records());
  }
  if (from._internal_total_bytes() != 0) {
    _this->_internal_set_total_bytes(from._internal_total_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightInfo::CopyFrom(const FlightInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.FlightInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightInfo::IsInitialized() const {
  return true;
}

void FlightInfo::InternalSwap(FlightInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.endpoint_.InternalSwap(&other->_impl_.endpoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_, lhs_arena,
      &other->_impl_.schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightInfo, _impl_.total_bytes_)
      + sizeof(FlightInfo::_impl_.total_bytes_)
      - PROTOBUF_FIELD_OFFSET(FlightInfo, _impl_.flight_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.flight_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.flight_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[10]);
}

// ===================================================================

class FlightEndpoint::_Internal {
 public:
  static const ::arrow::flight::protocol::Ticket& ticket(const FlightEndpoint* msg);
};

const ::arrow::flight::protocol::Ticket&
FlightEndpoint::_Internal::ticket(const FlightEndpoint* msg) {
  return *msg->_impl_.ticket_;
}
FlightEndpoint::FlightEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.FlightEndpoint)
}
FlightEndpoint::FlightEndpoint(const FlightEndpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightEndpoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){from._impl_.location_}
    , decltype(_impl_.ticket_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ticket()) {
    _this->_impl_.ticket_ = new ::arrow::flight::protocol::Ticket(*from._impl_.ticket_);
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.FlightEndpoint)
}

inline void FlightEndpoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){arena}
    , decltype(_impl_.ticket_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightEndpoint::~FlightEndpoint() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.FlightEndpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightEndpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ticket_;
}

void FlightEndpoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightEndpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.FlightEndpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ticket_ != nullptr) {
    delete _impl_.ticket_;
  }
  _impl_.ticket_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightEndpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .arrow.flight.protocol.Ticket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .arrow.flight.protocol.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightEndpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.FlightEndpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.Ticket ticket = 1;
  if (this->_internal_has_ticket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ticket(this),
        _Internal::ticket(this).GetCachedSize(), target, stream);
  }

  // repeated .arrow.flight.protocol.Location location = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_location_size()); i < n; i++) {
    const auto& repfield = this->_internal_location(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.FlightEndpoint)
  return target;
}

size_t FlightEndpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.FlightEndpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arrow.flight.protocol.Location location = 2;
  total_size += 1UL * this->_internal_location_size();
  for (const auto& msg : this->_impl_.location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .arrow.flight.protocol.Ticket ticket = 1;
  if (this->_internal_has_ticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ticket_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightEndpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightEndpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightEndpoint::GetClassData() const { return &_class_data_; }


void FlightEndpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightEndpoint*>(&to_msg);
  auto& from = static_cast<const FlightEndpoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.FlightEndpoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.location_.MergeFrom(from._impl_.location_);
  if (from._internal_has_ticket()) {
    _this->_internal_mutable_ticket()->::arrow::flight::protocol::Ticket::MergeFrom(
        from._internal_ticket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightEndpoint::CopyFrom(const FlightEndpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.FlightEndpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightEndpoint::IsInitialized() const {
  return true;
}

void FlightEndpoint::InternalSwap(FlightEndpoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.location_.InternalSwap(&other->_impl_.location_);
  swap(_impl_.ticket_, other->_impl_.ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightEndpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[11]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arrow.flight.protocol.Location.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrow.flight.protocol.Location.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[12]);
}

// ===================================================================

class Ticket::_Internal {
 public:
};

Ticket::Ticket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.Ticket)
}
Ticket::Ticket(const Ticket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ticket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ticket_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticket().empty()) {
    _this->_impl_.ticket_.Set(from._internal_ticket(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.Ticket)
}

inline void Ticket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ticket_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ticket::~Ticket() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.Ticket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ticket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ticket_.Destroy();
}

void Ticket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.Ticket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticket_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ticket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ticket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.Ticket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->_internal_ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.Ticket)
  return target;
}

size_t Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.Ticket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->_internal_ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ticket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ticket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ticket::GetClassData() const { return &_class_data_; }


void Ticket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ticket*>(&to_msg);
  auto& from = static_cast<const Ticket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.Ticket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ticket().empty()) {
    _this->_internal_set_ticket(from._internal_ticket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ticket::CopyFrom(const Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ticket::IsInitialized() const {
  return true;
}

void Ticket::InternalSwap(Ticket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticket_, lhs_arena,
      &other->_impl_.ticket_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Ticket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[13]);
}

// ===================================================================

class FlightData::_Internal {
 public:
  static const ::arrow::flight::protocol::FlightDescriptor& flight_descriptor(const FlightData* msg);
};

const ::arrow::flight::protocol::FlightDescriptor&
FlightData::_Internal::flight_descriptor(const FlightData* msg) {
  return *msg->_impl_.flight_descriptor_;
}
FlightData::FlightData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.FlightData)
}
FlightData::FlightData(const FlightData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_header_){}
    , decltype(_impl_.app_metadata_){}
    , decltype(_impl_.data_body_){}
    , decltype(_impl_.flight_descriptor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_header().empty()) {
    _this->_impl_.data_header_.Set(from._internal_data_header(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_metadata().empty()) {
    _this->_impl_.app_metadata_.Set(from._internal_app_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_body().empty()) {
    _this->_impl_.data_body_.Set(from._internal_data_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_flight_descriptor()) {
    _this->_impl_.flight_descriptor_ = new ::arrow::flight::protocol::FlightDescriptor(*from._impl_.flight_descriptor_);
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.FlightData)
}

inline void FlightData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_header_){}
    , decltype(_impl_.app_metadata_){}
    , decltype(_impl_.data_body_){}
    , decltype(_impl_.flight_descriptor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlightData::~FlightData() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.FlightData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_header_.Destroy();
  _impl_.app_metadata_.Destroy();
  _impl_.data_body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.flight_descriptor_;
}

void FlightData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightData::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.FlightData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_header_.ClearToEmpty();
  _impl_.app_metadata_.ClearToEmpty();
  _impl_.data_body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.flight_descriptor_ != nullptr) {
    delete _impl_.flight_descriptor_;
  }
  _impl_.flight_descriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .arrow.flight.protocol.FlightDescriptor flight_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flight_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes app_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data_body = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_data_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.FlightData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.protocol.FlightDescriptor flight_descriptor = 1;
  if (this->_internal_has_flight_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::flight_descriptor(this),
        _Internal::flight_descriptor(this).GetCachedSize(), target, stream);
  }

  // bytes data_header = 2;
  if (!this->_internal_data_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data_header(), target);
  }

  // bytes app_metadata = 3;
  if (!this->_internal_app_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_app_metadata(), target);
  }

  // bytes data_body = 1000;
  if (!this->_internal_data_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1000, this->_internal_data_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.FlightData)
  return target;
}

size_t FlightData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.FlightData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_header = 2;
  if (!this->_internal_data_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_header());
  }

  // bytes app_metadata = 3;
  if (!this->_internal_app_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_metadata());
  }

  // bytes data_body = 1000;
  if (!this->_internal_data_body().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_body());
  }

  // .arrow.flight.protocol.FlightDescriptor flight_descriptor = 1;
  if (this->_internal_has_flight_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flight_descriptor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightData::GetClassData() const { return &_class_data_; }


void FlightData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightData*>(&to_msg);
  auto& from = static_cast<const FlightData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.FlightData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_header().empty()) {
    _this->_internal_set_data_header(from._internal_data_header());
  }
  if (!from._internal_app_metadata().empty()) {
    _this->_internal_set_app_metadata(from._internal_app_metadata());
  }
  if (!from._internal_data_body().empty()) {
    _this->_internal_set_data_body(from._internal_data_body());
  }
  if (from._internal_has_flight_descriptor()) {
    _this->_internal_mutable_flight_descriptor()->::arrow::flight::protocol::FlightDescriptor::MergeFrom(
        from._internal_flight_descriptor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightData::CopyFrom(const FlightData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.FlightData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightData::IsInitialized() const {
  return true;
}

void FlightData::InternalSwap(FlightData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_header_, lhs_arena,
      &other->_impl_.data_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_metadata_, lhs_arena,
      &other->_impl_.app_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_body_, lhs_arena,
      &other->_impl_.data_body_, rhs_arena
  );
  swap(_impl_.flight_descriptor_, other->_impl_.flight_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[14]);
}

// ===================================================================

class PutResult::_Internal {
 public:
};

PutResult::PutResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.protocol.PutResult)
}
PutResult::PutResult(const PutResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_metadata().empty()) {
    _this->_impl_.app_metadata_.Set(from._internal_app_metadata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arrow.flight.protocol.PutResult)
}

inline void PutResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutResult::~PutResult() {
  // @@protoc_insertion_point(destructor:arrow.flight.protocol.PutResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_metadata_.Destroy();
}

void PutResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutResult::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.protocol.PutResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes app_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.protocol.PutResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes app_metadata = 1;
  if (!this->_internal_app_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_app_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.protocol.PutResult)
  return target;
}

size_t PutResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.protocol.PutResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes app_metadata = 1;
  if (!this->_internal_app_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_metadata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutResult::GetClassData() const { return &_class_data_; }


void PutResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutResult*>(&to_msg);
  auto& from = static_cast<const PutResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.protocol.PutResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_metadata().empty()) {
    _this->_internal_set_app_metadata(from._internal_app_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutResult::CopyFrom(const PutResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.protocol.PutResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResult::IsInitialized() const {
  return true;
}

void PutResult::InternalSwap(PutResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_metadata_, lhs_arena,
      &other->_impl_.app_metadata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PutResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Flight_2eproto_getter, &descriptor_table_Flight_2eproto_once,
      file_level_metadata_Flight_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace flight
}  // namespace arrow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::HandshakeRequest*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::HandshakeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::HandshakeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::HandshakeResponse*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::HandshakeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::HandshakeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::BasicAuth*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::BasicAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::BasicAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::Empty*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::ActionType*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::ActionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::ActionType >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::Criteria*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::Criteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::Criteria >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::Action*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::Result*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::SchemaResult*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::SchemaResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::SchemaResult >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::FlightDescriptor*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::FlightDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::FlightDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::FlightInfo*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::FlightInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::FlightInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::FlightEndpoint*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::FlightEndpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::FlightEndpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::Location*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::Ticket*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::Ticket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::Ticket >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::FlightData*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::FlightData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::FlightData >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::protocol::PutResult*
Arena::CreateMaybeMessage< ::arrow::flight::protocol::PutResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::protocol::PutResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
