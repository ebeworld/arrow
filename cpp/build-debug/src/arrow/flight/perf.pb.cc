// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf.proto

#include "perf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace arrow {
namespace flight {
namespace perf {
PROTOBUF_CONSTEXPR Perf::Perf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.records_per_stream_)*/int64_t{0}
  , /*decltype(_impl_.stream_count_)*/0
  , /*decltype(_impl_.records_per_batch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDefaultTypeInternal() {}
  union {
    Perf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDefaultTypeInternal _Perf_default_instance_;
PROTOBUF_CONSTEXPR Token::Token(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.definition_)*/nullptr
  , /*decltype(_impl_.start_)*/int64_t{0}
  , /*decltype(_impl_.end_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace perf
}  // namespace flight
}  // namespace arrow
static ::_pb::Metadata file_level_metadata_perf_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_perf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_perf_2eproto = nullptr;

const uint32_t TableStruct_perf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Perf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Perf, _impl_.schema_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Perf, _impl_.stream_count_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Perf, _impl_.records_per_stream_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Perf, _impl_.records_per_batch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Token, _impl_.definition_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Token, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::arrow::flight::perf::Token, _impl_.end_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::arrow::flight::perf::Perf)},
  { 10, -1, -1, sizeof(::arrow::flight::perf::Token)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::arrow::flight::perf::_Perf_default_instance_._instance,
  &::arrow::flight::perf::_Token_default_instance_._instance,
};

const char descriptor_table_protodef_perf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nperf.proto\022\021arrow.flight.perf\"c\n\004Perf\022"
  "\016\n\006schema\030\001 \001(\014\022\024\n\014stream_count\030\002 \001(\005\022\032\n"
  "\022records_per_stream\030\003 \001(\003\022\031\n\021records_per"
  "_batch\030\004 \001(\005\"P\n\005Token\022+\n\ndefinition\030\001 \001("
  "\0132\027.arrow.flight.perf.Perf\022\r\n\005start\030\002 \001("
  "\003\022\013\n\003end\030\003 \001(\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_perf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_perf_2eproto = {
    false, false, 222, descriptor_table_protodef_perf_2eproto,
    "perf.proto",
    &descriptor_table_perf_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_perf_2eproto::offsets,
    file_level_metadata_perf_2eproto, file_level_enum_descriptors_perf_2eproto,
    file_level_service_descriptors_perf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_perf_2eproto_getter() {
  return &descriptor_table_perf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_perf_2eproto(&descriptor_table_perf_2eproto);
namespace arrow {
namespace flight {
namespace perf {

// ===================================================================

class Perf::_Internal {
 public:
};

Perf::Perf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.perf.Perf)
}
Perf::Perf(const Perf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Perf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){}
    , decltype(_impl_.records_per_stream_){}
    , decltype(_impl_.stream_count_){}
    , decltype(_impl_.records_per_batch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema().empty()) {
    _this->_impl_.schema_.Set(from._internal_schema(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.records_per_stream_, &from._impl_.records_per_stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.records_per_batch_) -
    reinterpret_cast<char*>(&_impl_.records_per_stream_)) + sizeof(_impl_.records_per_batch_));
  // @@protoc_insertion_point(copy_constructor:arrow.flight.perf.Perf)
}

inline void Perf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){}
    , decltype(_impl_.records_per_stream_){int64_t{0}}
    , decltype(_impl_.stream_count_){0}
    , decltype(_impl_.records_per_batch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Perf::~Perf() {
  // @@protoc_insertion_point(destructor:arrow.flight.perf.Perf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Perf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_.Destroy();
}

void Perf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Perf::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.perf.Perf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_.ClearToEmpty();
  ::memset(&_impl_.records_per_stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.records_per_batch_) -
      reinterpret_cast<char*>(&_impl_.records_per_stream_)) + sizeof(_impl_.records_per_batch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Perf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stream_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stream_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 records_per_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.records_per_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 records_per_batch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.records_per_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Perf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.perf.Perf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes schema = 1;
  if (!this->_internal_schema().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_schema(), target);
  }

  // int32 stream_count = 2;
  if (this->_internal_stream_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stream_count(), target);
  }

  // int64 records_per_stream = 3;
  if (this->_internal_records_per_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_records_per_stream(), target);
  }

  // int32 records_per_batch = 4;
  if (this->_internal_records_per_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_records_per_batch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.perf.Perf)
  return target;
}

size_t Perf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.perf.Perf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes schema = 1;
  if (!this->_internal_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema());
  }

  // int64 records_per_stream = 3;
  if (this->_internal_records_per_stream() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_records_per_stream());
  }

  // int32 stream_count = 2;
  if (this->_internal_stream_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stream_count());
  }

  // int32 records_per_batch = 4;
  if (this->_internal_records_per_batch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_records_per_batch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Perf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Perf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Perf::GetClassData() const { return &_class_data_; }


void Perf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Perf*>(&to_msg);
  auto& from = static_cast<const Perf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.perf.Perf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_schema().empty()) {
    _this->_internal_set_schema(from._internal_schema());
  }
  if (from._internal_records_per_stream() != 0) {
    _this->_internal_set_records_per_stream(from._internal_records_per_stream());
  }
  if (from._internal_stream_count() != 0) {
    _this->_internal_set_stream_count(from._internal_stream_count());
  }
  if (from._internal_records_per_batch() != 0) {
    _this->_internal_set_records_per_batch(from._internal_records_per_batch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Perf::CopyFrom(const Perf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.perf.Perf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perf::IsInitialized() const {
  return true;
}

void Perf::InternalSwap(Perf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_, lhs_arena,
      &other->_impl_.schema_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Perf, _impl_.records_per_batch_)
      + sizeof(Perf::_impl_.records_per_batch_)
      - PROTOBUF_FIELD_OFFSET(Perf, _impl_.records_per_stream_)>(
          reinterpret_cast<char*>(&_impl_.records_per_stream_),
          reinterpret_cast<char*>(&other->_impl_.records_per_stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Perf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perf_2eproto_getter, &descriptor_table_perf_2eproto_once,
      file_level_metadata_perf_2eproto[0]);
}

// ===================================================================

class Token::_Internal {
 public:
  static const ::arrow::flight::perf::Perf& definition(const Token* msg);
};

const ::arrow::flight::perf::Perf&
Token::_Internal::definition(const Token* msg) {
  return *msg->_impl_.definition_;
}
Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arrow.flight.perf.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Token* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.definition_){nullptr}
    , decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_definition()) {
    _this->_impl_.definition_ = new ::arrow::flight::perf::Perf(*from._impl_.definition_);
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:arrow.flight.perf.Token)
}

inline void Token::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.definition_){nullptr}
    , decltype(_impl_.start_){int64_t{0}}
    , decltype(_impl_.end_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:arrow.flight.perf.Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.definition_;
}

void Token::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:arrow.flight.perf.Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.definition_ != nullptr) {
    delete _impl_.definition_;
  }
  _impl_.definition_ = nullptr;
  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .arrow.flight.perf.Perf definition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_definition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrow.flight.perf.Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrow.flight.perf.Perf definition = 1;
  if (this->_internal_has_definition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::definition(this),
        _Internal::definition(this).GetCachedSize(), target, stream);
  }

  // int64 start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_start(), target);
  }

  // int64 end = 3;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrow.flight.perf.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrow.flight.perf.Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrow.flight.perf.Perf definition = 1;
  if (this->_internal_has_definition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.definition_);
  }

  // int64 start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start());
  }

  // int64 end = 3;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Token::GetClassData() const { return &_class_data_; }


void Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Token*>(&to_msg);
  auto& from = static_cast<const Token&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arrow.flight.perf.Token)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_definition()) {
    _this->_internal_mutable_definition()->::arrow::flight::perf::Perf::MergeFrom(
        from._internal_definition());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrow.flight.perf.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, _impl_.end_)
      + sizeof(Token::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(Token, _impl_.definition_)>(
          reinterpret_cast<char*>(&_impl_.definition_),
          reinterpret_cast<char*>(&other->_impl_.definition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_perf_2eproto_getter, &descriptor_table_perf_2eproto_once,
      file_level_metadata_perf_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perf
}  // namespace flight
}  // namespace arrow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrow::flight::perf::Perf*
Arena::CreateMaybeMessage< ::arrow::flight::perf::Perf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::perf::Perf >(arena);
}
template<> PROTOBUF_NOINLINE ::arrow::flight::perf::Token*
Arena::CreateMaybeMessage< ::arrow::flight::perf::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arrow::flight::perf::Token >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
